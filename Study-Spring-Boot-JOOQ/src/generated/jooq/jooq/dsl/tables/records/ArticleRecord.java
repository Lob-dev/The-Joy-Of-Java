/*
 * This file is generated by jOOQ.
 */
package jooq.dsl.tables.records;


import jooq.dsl.tables.Article;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleRecord extends UpdatableRecordImpl<ArticleRecord> implements Record4<Long, String, String, Long> {

    private static final long serialVersionUID = 759362849;

    /**
     * Setter for <code>public.article.id</code>.
     */
    public ArticleRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.article.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.article.description</code>.
     */
    public ArticleRecord setDescription(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.article.description</code>.
     */
    public String getDescription() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.article.title</code>.
     */
    public ArticleRecord setTitle(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.article.title</code>.
     */
    public String getTitle() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.article.author_id</code>.
     */
    public ArticleRecord setAuthorId(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.article.author_id</code>.
     */
    public Long getAuthorId() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, String, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Article.ARTICLE.ID;
    }

    @Override
    public Field<String> field2() {
        return Article.ARTICLE.DESCRIPTION;
    }

    @Override
    public Field<String> field3() {
        return Article.ARTICLE.TITLE;
    }

    @Override
    public Field<Long> field4() {
        return Article.ARTICLE.AUTHOR_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getDescription();
    }

    @Override
    public String component3() {
        return getTitle();
    }

    @Override
    public Long component4() {
        return getAuthorId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getDescription();
    }

    @Override
    public String value3() {
        return getTitle();
    }

    @Override
    public Long value4() {
        return getAuthorId();
    }

    @Override
    public ArticleRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ArticleRecord value2(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public ArticleRecord value3(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public ArticleRecord value4(Long value) {
        setAuthorId(value);
        return this;
    }

    @Override
    public ArticleRecord values(Long value1, String value2, String value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ArticleRecord
     */
    public ArticleRecord() {
        super(Article.ARTICLE);
    }

    /**
     * Create a detached, initialised ArticleRecord
     */
    public ArticleRecord(Long id, String description, String title, Long authorId) {
        super(Article.ARTICLE);

        set(0, id);
        set(1, description);
        set(2, title);
        set(3, authorId);
    }
}
